### YamlMime:PythonClass
uid: azure.healthinsights.radiologyinsights.models.RadiologyCodeWithTypes
name: RadiologyCodeWithTypes
fullName: azure.healthinsights.radiologyinsights.models.RadiologyCodeWithTypes
module: azure.healthinsights.radiologyinsights.models
summary: 'Radiology code with types : used in imaging procedure recommendation for
  contrast and view.'
constructor:
  syntax: 'RadiologyCodeWithTypes(*args: Any, **kwargs: Any)'
variables:
- description: 'The SNOMED CT code indicates whether imaging was conducted with or
    without contrast

    in the case of contrast, and in the case of views, it denotes the number of views.
    Required.'
  name: code
  types:
  - <xref:azure.healthinsights.radiologyinsights.models.CodeableConcept>
- description: 'The collection of types will indicate the contrast substance used
    in the case of

    contrast and, in the case of views, it will specify the types of views, such as
    lateral and

    frontal, etc. Required.'
  name: types
  types:
  - <xref:list>[<xref:azure.healthinsights.radiologyinsights.models.CodeableConcept>]
methods:
- uid: azure.healthinsights.radiologyinsights.models.RadiologyCodeWithTypes.as_dict
  name: as_dict
  summary: Return a dict that can be turned into json using json.dump.
  signature: 'as_dict(*, exclude_readonly: bool = False) -> Dict[str, Any]'
  keywordOnlyParameters:
  - name: exclude_readonly
    description: Whether to remove the readonly properties.
    defaultValue: 'False'
    types:
    - <xref:bool>
  return:
    description: A dict JSON compatible object
    types:
    - <xref:dict>
- uid: azure.healthinsights.radiologyinsights.models.RadiologyCodeWithTypes.clear
  name: clear
  summary: Remove all items from D.
  signature: clear() -> None
- uid: azure.healthinsights.radiologyinsights.models.RadiologyCodeWithTypes.copy
  name: copy
  signature: copy() -> Model
- uid: azure.healthinsights.radiologyinsights.models.RadiologyCodeWithTypes.get
  name: get
  summary: 'Get the value for key if key is in the dictionary, else default.

    :param str key: The key to look up.

    :param any default: The value to return if key is not in the dictionary. Defaults
    to None

    :returns: D[k] if k in D, else d.

    :rtype: any'
  signature: 'get(key: str, default: Any = None) -> Any'
  parameters:
  - name: key
    isRequired: true
  - name: default
    defaultValue: None
- uid: azure.healthinsights.radiologyinsights.models.RadiologyCodeWithTypes.items
  name: items
  signature: items() -> ItemsView[str, Any]
  return:
    description: set-like object providing a view on D's items
    types:
    - <xref:typing.ItemsView>
- uid: azure.healthinsights.radiologyinsights.models.RadiologyCodeWithTypes.keys
  name: keys
  signature: keys() -> KeysView[str]
  return:
    description: a set-like object providing a view on D's keys
    types:
    - <xref:typing.KeysView>
- uid: azure.healthinsights.radiologyinsights.models.RadiologyCodeWithTypes.pop
  name: pop
  summary: 'Removes specified key and return the corresponding value.

    :param str key: The key to pop.

    :param any default: The value to return if key is not in the dictionary

    :returns: The value corresponding to the key.

    :rtype: any

    :raises KeyError: If key is not found and default is not given.'
  signature: 'pop(key: str, default: ~typing.Any = <object object>) -> Any'
  parameters:
  - name: key
    isRequired: true
  - name: default
- uid: azure.healthinsights.radiologyinsights.models.RadiologyCodeWithTypes.popitem
  name: popitem
  summary: 'Removes and returns some (key, value) pair

    :returns: The (key, value) pair.

    :rtype: tuple

    :raises KeyError: if D is empty.'
  signature: popitem() -> Tuple[str, Any]
- uid: azure.healthinsights.radiologyinsights.models.RadiologyCodeWithTypes.setdefault
  name: setdefault
  summary: 'Same as calling D.get(k, d), and setting D[k]=d if k not found

    :param str key: The key to look up.

    :param any default: The value to set if key is not in the dictionary

    :returns: D[k] if k in D, else d.

    :rtype: any'
  signature: 'setdefault(key: str, default: ~typing.Any = <object object>) -> Any'
  parameters:
  - name: key
    isRequired: true
  - name: default
- uid: azure.healthinsights.radiologyinsights.models.RadiologyCodeWithTypes.update
  name: update
  summary: 'Updates D from mapping/iterable E and F.

    :param any args: Either a mapping object or an iterable of key-value pairs.'
  signature: 'update(*args: Any, **kwargs: Any) -> None'
- uid: azure.healthinsights.radiologyinsights.models.RadiologyCodeWithTypes.values
  name: values
  signature: values() -> ValuesView[Any]
  return:
    description: an object providing a view on D's values
    types:
    - <xref:typing.ValuesView>
attributes:
- uid: azure.healthinsights.radiologyinsights.models.RadiologyCodeWithTypes.code
  name: code
  summary: 'The SNOMED CT code indicates whether imaging was conducted with or without
    contrast in the case

    of contrast, and in the case of views, it denotes the number of views. Required.'
  signature: 'code: _models.CodeableConcept'
- uid: azure.healthinsights.radiologyinsights.models.RadiologyCodeWithTypes.types
  name: types
  summary: 'The collection of types will indicate the contrast substance used in the
    case of contrast and,

    in the case of views, it will specify the types of views, such as lateral and
    frontal, etc.

    Required.'
  signature: 'types: List[_models.CodeableConcept]'
